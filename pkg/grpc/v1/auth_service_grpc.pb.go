// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: auth_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_SignIn_FullMethodName               = "/auth.AuthService/SignIn"
	AuthService_SignOut_FullMethodName              = "/auth.AuthService/SignOut"
	AuthService_GetAccessToken_FullMethodName       = "/auth.AuthService/GetAccessToken"
	AuthService_GetValidationKeySet_FullMethodName  = "/auth.AuthService/GetValidationKeySet"
	AuthService_TranslateAccessToken_FullMethodName = "/auth.AuthService/TranslateAccessToken"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Upon succesful login user receives a refresh_token.
	// When it expires or is revoked user has to login again.
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// SignOut revokes user's active refresh_token.
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error)
	GetValidationKeySet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AuthService_GetValidationKeySetClient, error)
	TranslateAccessToken(ctx context.Context, opts ...grpc.CallOption) (AuthService_TranslateAccessTokenClient, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, AuthService_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SignOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error) {
	out := new(GetAccessTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetValidationKeySet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AuthService_GetValidationKeySetClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[0], AuthService_GetValidationKeySet_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceGetValidationKeySetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthService_GetValidationKeySetClient interface {
	Recv() (*Jwk, error)
	grpc.ClientStream
}

type authServiceGetValidationKeySetClient struct {
	grpc.ClientStream
}

func (x *authServiceGetValidationKeySetClient) Recv() (*Jwk, error) {
	m := new(Jwk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) TranslateAccessToken(ctx context.Context, opts ...grpc.CallOption) (AuthService_TranslateAccessTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[1], AuthService_TranslateAccessToken_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceTranslateAccessTokenClient{stream}
	return x, nil
}

type AuthService_TranslateAccessTokenClient interface {
	Send(*TranslateAccessTokenRequest) error
	Recv() (*TranslateAccessTokenResponse, error)
	grpc.ClientStream
}

type authServiceTranslateAccessTokenClient struct {
	grpc.ClientStream
}

func (x *authServiceTranslateAccessTokenClient) Send(m *TranslateAccessTokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceTranslateAccessTokenClient) Recv() (*TranslateAccessTokenResponse, error) {
	m := new(TranslateAccessTokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// Upon succesful login user receives a refresh_token.
	// When it expires or is revoked user has to login again.
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// SignOut revokes user's active refresh_token.
	SignOut(context.Context, *SignOutRequest) (*emptypb.Empty, error)
	GetAccessToken(context.Context, *GetAccessTokenRequest) (*GetAccessTokenResponse, error)
	GetValidationKeySet(*emptypb.Empty, AuthService_GetValidationKeySetServer) error
	TranslateAccessToken(AuthService_TranslateAccessTokenServer) error
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthServiceServer) SignOut(context.Context, *SignOutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedAuthServiceServer) GetAccessToken(context.Context, *GetAccessTokenRequest) (*GetAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedAuthServiceServer) GetValidationKeySet(*emptypb.Empty, AuthService_GetValidationKeySetServer) error {
	return status.Errorf(codes.Unimplemented, "method GetValidationKeySet not implemented")
}
func (UnimplementedAuthServiceServer) TranslateAccessToken(AuthService_TranslateAccessTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method TranslateAccessToken not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAccessToken(ctx, req.(*GetAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetValidationKeySet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetValidationKeySet(m, &authServiceGetValidationKeySetServer{stream})
}

type AuthService_GetValidationKeySetServer interface {
	Send(*Jwk) error
	grpc.ServerStream
}

type authServiceGetValidationKeySetServer struct {
	grpc.ServerStream
}

func (x *authServiceGetValidationKeySetServer) Send(m *Jwk) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthService_TranslateAccessToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).TranslateAccessToken(&authServiceTranslateAccessTokenServer{stream})
}

type AuthService_TranslateAccessTokenServer interface {
	Send(*TranslateAccessTokenResponse) error
	Recv() (*TranslateAccessTokenRequest, error)
	grpc.ServerStream
}

type authServiceTranslateAccessTokenServer struct {
	grpc.ServerStream
}

func (x *authServiceTranslateAccessTokenServer) Send(m *TranslateAccessTokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceTranslateAccessTokenServer) Recv() (*TranslateAccessTokenRequest, error) {
	m := new(TranslateAccessTokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _AuthService_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _AuthService_SignOut_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _AuthService_GetAccessToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetValidationKeySet",
			Handler:       _AuthService_GetValidationKeySet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TranslateAccessToken",
			Handler:       _AuthService_TranslateAccessToken_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "auth_service.proto",
}
