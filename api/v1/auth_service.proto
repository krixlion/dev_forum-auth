syntax = "proto3";

package auth;

option go_package = "github.com/krixlion/dev_forum-auth/pkg/grpc/v1;pb";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

service AuthService {
    // Upon successful login user receives a refresh_token.
    // When it expires or is revoked user has to login again.
    rpc SignIn(SignInRequest) returns (SignInResponse) {}

    // SignOut revokes user's active refresh_token.
    rpc SignOut(SignOutRequest) returns (google.protobuf.Empty) {}

    // Creates a new access token from a given refresh token.
    rpc GetAccessToken(GetAccessTokenRequest) returns (GetAccessTokenResponse);
    
    // Returns a list of public JWKs to use to verify incoming JWTs.
    rpc GetValidationKeySet(google.protobuf.Empty) returns (stream Jwk);
    
    // Requires mTLS client cert to be provided.
    // Responds with a JWT related to given opaque token.
    rpc TranslateAccessToken(stream TranslateAccessTokenRequest) returns (stream TranslateAccessTokenResponse);
}

message SignInRequest {
    string password = 3;
    string email = 4;
}

message SignInResponse {    
    // Encoded JWT refresh token
    string refresh_token = 2;
}

message SignOutRequest {
    // Encoded JWT refresh token
    string refresh_token = 1;
}

message GetAccessTokenRequest {
    // Encoded JWT refresh token
    string refresh_token = 1;
}

message GetAccessTokenResponse {
    // Encoded JWT access token
    string access_token = 1;
}

message TranslateAccessTokenRequest {
    string opaque_access_token = 1;
}

message TranslateAccessTokenResponse {
    // Encoded JWT access token
    string access_token = 1;
}

message Jwk {
    // Key ID
    string kid = 1;
    // Key Type
    string kty = 2;
    
    // Key Signature Algorithm
    string alg = 3;

    // Field for key-specific data.
    // Eg. {n, e} for RSA or {crv, x, y} for EC.
    google.protobuf.Any key = 4;
}
